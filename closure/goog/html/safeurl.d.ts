declare module goog {
    function require(name: 'goog.html.SafeUrl'): typeof goog.html.SafeUrl;
}

declare module goog.html {

    /**
     * A string that is safe to use in URL context in DOM APIs and HTML documents.
     *
     * A SafeUrl is a string-like object that carries the security type contract
     * that its value as a string will not cause untrusted script execution
     * when evaluated as a hyperlink URL in a browser.
     *
     * Values of this type are guaranteed to be safe to use in URL/hyperlink
     * contexts, such as assignment to URL-valued DOM properties, in the sense that
     * the use will not result in a Cross-Site-Scripting vulnerability. Similarly,
     * SafeUrls can be interpolated into the URL context of an HTML template (e.g.,
     * inside a href attribute). However, appropriate HTML-escaping must still be
     * applied.
     *
     * Note that, as documented in `goog.html.SafeUrl.unwrap`, this type's
     * contract does not guarantee that instances are safe to interpolate into HTML
     * without appropriate escaping.
     *
     * Note also that this type's contract does not imply any guarantees regarding
     * the resource the URL refers to.  In particular, SafeUrls are <b>not</b>
     * safe to use in a context where the referred-to resource is interpreted as
     * trusted code, e.g., as the src of a script tag.
     *
     * Instances of this type must be created via the factory methods
     * (`goog.html.SafeUrl.fromConstant`, `goog.html.SafeUrl.sanitize`),
     * etc and not by invoking its constructor.  The constructor intentionally
     * takes no parameters and the type is immutable; hence only a default instance
     * corresponding to the empty string can be obtained via constructor invocation.
     *
     * @see goog.html.SafeUrl#fromConstant
     * @see goog.html.SafeUrl#from
     * @see goog.html.SafeUrl#sanitize
     * @constructor
     * @final
     * @struct
     * @implements {goog.i18n.bidi.DirectionalString}
     * @implements {goog.string.TypedString}
     */
    class SafeUrl {
        constructor();
        
        /**
         * The innocuous string generated by goog.html.SafeUrl.sanitize when passed
         * an unsafe URL.
         *
         * about:invalid is registered in
         * http://www.w3.org/TR/css3-values/#about-invalid.
         * http://tools.ietf.org/html/rfc6694#section-2.2.1 permits about URLs to
         * contain a fragment, which is not to be considered when determining if an
         * about URL is well-known.
         *
         * Using about:invalid seems preferable to using a fixed data URL, since
         * browsers might choose to not report CSP violations on it, as legitimate
         * CSS function calls to attr() can result in this URL being produced. It is
         * also a standard URL which matches exactly the semantics we need:
         * "The about:invalid URI references a non-existent document with a generic
         * error condition. It can be used when a URI is necessary, but the default
         * value shouldn't be resolveable as any type of document".
         *
         * @const {string}
         */
        static INNOCUOUS_STRING: any;
        
        /**
         * Public version of goog.html.SAFE_URL_PATTERN_. Updating
         * goog.html.SAFE_URL_PATTERN_ doesn't seem to be backward compatible.
         * Namespace is also changed to goog.html.SafeUrl so it can be imported using
         * goog.require('goog.dom.SafeUrl').
         *
         * TODO(bangert): Remove SAFE_URL_PATTERN_
         * @const {!RegExp}
         */
        static SAFE_URL_PATTERN: any;
        
        /**
         * A SafeUrl corresponding to the special about:blank url.
         * @const {!goog.html.SafeUrl}
         */
        static ABOUT_BLANK: any;
        
        /**
         * Performs a runtime check that the provided object is indeed a SafeUrl
         * object, and returns its value.
         *
         * IMPORTANT: The guarantees of the SafeUrl type contract only extend to the
         * behavior of  browsers when interpreting URLs. Values of SafeUrl objects MUST
         * be appropriately escaped before embedding in a HTML document. Note that the
         * required escaping is context-sensitive (e.g. a different escaping is
         * required for embedding a URL in a style property within a style
         * attribute, as opposed to embedding in a href attribute).
         *
         * @param {!goog.html.SafeUrl} safeUrl The object to extract from.
         * @return {string} The SafeUrl object's contained string, unless the run-time
         *     type check fails. In that case, `unwrap` returns an innocuous
         *     string, or, if assertions are enabled, throws
         *     `goog.asserts.AssertionError`.
         */
        static unwrap(safeUrl: goog.html.SafeUrl): string;
        
        /**
         * Creates a SafeUrl object from a compile-time constant string.
         *
         * Compile-time constant strings are inherently program-controlled and hence
         * trusted.
         *
         * @param {!goog.string.Const} url A compile-time-constant string from which to
         *         create a SafeUrl.
         * @return {!goog.html.SafeUrl} A SafeUrl object initialized to `url`.
         */
        static fromConstant(url: goog.string$.Const): goog.html.SafeUrl;
        
        /**
         * Creates a SafeUrl wrapping a blob URL for the given `blob`.
         *
         * The blob URL is created with `URL.createObjectURL`. If the MIME type
         * for `blob` is not of a known safe audio, image or video MIME type,
         * then the SafeUrl will wrap {@link #INNOCUOUS_STRING}.
         *
         * @see http://www.w3.org/TR/FileAPI/#url
         * @param {!Blob} blob
         * @return {!goog.html.SafeUrl} The blob URL, or an innocuous string wrapped
         *   as a SafeUrl.
         */
        static fromBlob(blob: Blob): goog.html.SafeUrl;
        
        /**
         * Creates a SafeUrl wrapping a data: URL, after validating it matches a
         * known-safe audio, image or video MIME type.
         *
         * @param {string} dataUrl A valid base64 data URL with one of the whitelisted
         *     audio, image or video MIME types.
         * @return {!goog.html.SafeUrl} A matching safe URL, or {@link INNOCUOUS_STRING}
         *     wrapped as a SafeUrl if it does not pass.
         */
        static fromDataUrl(dataUrl: string): goog.html.SafeUrl;
        
        /**
         * Creates a SafeUrl wrapping a tel: URL.
         *
         * @param {string} telUrl A tel URL.
         * @return {!goog.html.SafeUrl} A matching safe URL, or {@link INNOCUOUS_STRING}
         *     wrapped as a SafeUrl if it does not pass.
         */
        static fromTelUrl(telUrl: string): goog.html.SafeUrl;
        
        /**
         * Creates a SafeUrl wrapping a sip: URL. We only allow urls that consist of an
         * email address. The characters '?' and '#' are not allowed in the local part
         * of the email address.
         *
         * @param {string} sipUrl A sip URL.
         * @return {!goog.html.SafeUrl} A matching safe URL, or {@link INNOCUOUS_STRING}
         *     wrapped as a SafeUrl if it does not pass.
         */
        static fromSipUrl(sipUrl: string): goog.html.SafeUrl;
        
        /**
         * Creates a SafeUrl wrapping a fb-messenger://share URL.
         *
         * @param {string} facebookMessengerUrl A facebook messenger URL.
         * @return {!goog.html.SafeUrl} A matching safe URL, or {@link INNOCUOUS_STRING}
         *     wrapped as a SafeUrl if it does not pass.
         */
        static fromFacebookMessengerUrl(facebookMessengerUrl: string): goog.html.SafeUrl;
        
        /**
         * Creates a SafeUrl wrapping a sms: URL.
         *
         * @param {string} smsUrl A sms URL.
         * @return {!goog.html.SafeUrl} A matching safe URL, or {@link INNOCUOUS_STRING}
         *     wrapped as a SafeUrl if it does not pass.
         */
        static fromSmsUrl(smsUrl: string): goog.html.SafeUrl;
        
        /**
         * Sanitizes a Chrome extension URL to SafeUrl, given a compile-time-constant
         * extension identifier. Can also be restricted to chrome extensions.
         *
         * @param {string} url The url to sanitize. Should start with the extension
         *     scheme and the extension identifier.
         * @param {!goog.string.Const|!Array<!goog.string.Const>} extensionId The
         *     extension id to accept, as a compile-time constant or an array of those.
         *
         * @return {!goog.html.SafeUrl} Either `url` if it's deemed safe, or
         *     `INNOCUOUS_STRING` if it's not.
         */
        static sanitizeChromeExtensionUrl(url: string, extensionId: goog.string$.Const|Array<goog.string$.Const>): goog.html.SafeUrl;
        
        /**
         * Sanitizes a Firefox extension URL to SafeUrl, given a compile-time-constant
         * extension identifier. Can also be restricted to chrome extensions.
         *
         * @param {string} url The url to sanitize. Should start with the extension
         *     scheme and the extension identifier.
         * @param {!goog.string.Const|!Array<!goog.string.Const>} extensionId The
         *     extension id to accept, as a compile-time constant or an array of those.
         *
         * @return {!goog.html.SafeUrl} Either `url` if it's deemed safe, or
         *     `INNOCUOUS_STRING` if it's not.
         */
        static sanitizeFirefoxExtensionUrl(url: string, extensionId: goog.string$.Const|Array<goog.string$.Const>): goog.html.SafeUrl;
        
        /**
         * Sanitizes a Edge extension URL to SafeUrl, given a compile-time-constant
         * extension identifier. Can also be restricted to chrome extensions.
         *
         * @param {string} url The url to sanitize. Should start with the extension
         *     scheme and the extension identifier.
         * @param {!goog.string.Const|!Array<!goog.string.Const>} extensionId The
         *     extension id to accept, as a compile-time constant or an array of those.
         *
         * @return {!goog.html.SafeUrl} Either `url` if it's deemed safe, or
         *     `INNOCUOUS_STRING` if it's not.
         */
        static sanitizeEdgeExtensionUrl(url: string, extensionId: goog.string$.Const|Array<goog.string$.Const>): goog.html.SafeUrl;
        
        /**
         * Creates a SafeUrl from TrustedResourceUrl. This is safe because
         * TrustedResourceUrl is more tightly restricted than SafeUrl.
         *
         * @param {!goog.html.TrustedResourceUrl} trustedResourceUrl
         * @return {!goog.html.SafeUrl}
         */
        static fromTrustedResourceUrl(trustedResourceUrl: goog.html.TrustedResourceUrl): goog.html.SafeUrl;
        
        /**
         * Creates a SafeUrl object from `url`. If `url` is a
         * goog.html.SafeUrl then it is simply returned. Otherwise the input string is
         * validated to match a pattern of commonly used safe URLs.
         *
         * `url` may be a URL with the http, https, mailto or ftp scheme,
         * or a relative URL (i.e., a URL without a scheme; specifically, a
         * scheme-relative, absolute-path-relative, or path-relative URL).
         *
         * @see http://url.spec.whatwg.org/#concept-relative-url
         * @param {string|!goog.string.TypedString} url The URL to validate.
         * @return {!goog.html.SafeUrl} The validated URL, wrapped as a SafeUrl.
         */
        static sanitize(url: string|goog.string$.TypedString): goog.html.SafeUrl;
        
        /**
         * Creates a SafeUrl object from `url`. If `url` is a
         * goog.html.SafeUrl then it is simply returned. Otherwise the input string is
         * validated to match a pattern of commonly used safe URLs.
         *
         * `url` may be a URL with the http, https, mailto or ftp scheme,
         * or a relative URL (i.e., a URL without a scheme; specifically, a
         * scheme-relative, absolute-path-relative, or path-relative URL).
         *
         * This function asserts (using goog.asserts) that the URL matches this pattern.
         * If it does not, in addition to failing the assert, an innocous URL will be
         * returned.
         *
         * @see http://url.spec.whatwg.org/#concept-relative-url
         * @param {string|!goog.string.TypedString} url The URL to validate.
         * @return {!goog.html.SafeUrl} The validated URL, wrapped as a SafeUrl.
         */
        static sanitizeAssertUnchanged(url: string|goog.string$.TypedString): goog.html.SafeUrl;
        
        /**
         * Package-internal utility method to create SafeUrl instances.
         *
         * @param {string} url The string to initialize the SafeUrl object with.
         * @return {!goog.html.SafeUrl} The initialized SafeUrl object.
         * @package
         */
        static createSafeUrlSecurityPrivateDoNotAccessOrElse(url: string): goog.html.SafeUrl;
    }
}
